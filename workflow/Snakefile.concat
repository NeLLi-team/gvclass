import sys
from pathlib import Path
import glob
import os
import subprocess
import shutil

#snakemake -j 8 --use-conda --config querydir="example"

""" Assign taxonomy to NCDLV contigs """

# input and output dirs
querydir = Path(config["querydir"])
gvogs9dir="resources/gvogs9/"
outdir = config["querydir"] + "/results/"
queryfaadir = outdir + "faa"
queryfnadir = outdir + "fna"

# query file bases = query names without suffix
QUERYBASENAMES = [x.stem for x in querydir.iterdir() if x.is_file() and x.suffix in [".faa", ".fna"]]
# model names
GVOGs9 = [x.split("/")[-1].split(".")[0] for x in glob.glob(gvogs9dir + "*.hmm") if not x.split("/")[-1].startswith("combined")]

# labels file for tax assignments
labels = "resources/ncldvApril22_labels.txt"

""" Start snakemake"""
""" Assign taxonomy to NCDLV contigs """

rule all:
  input:
    expand(outdir + "{querybase}.tar.gz", querybase=QUERYBASENAMES)

""" 
Step 0 
Genecalling to find optimal translation table 
"""
rule reformat_faa:
  conda:
    "envs/gvclass.yml"
  input:
    str(querydir) + "/{querybase}.faa"
  output:
    str(queryfaadir) + "/{querybase}.faa"
  shell:
    """
    python workflow/scripts/00reformat.py {input} {output}
    """

rule genecalling:
  conda:
    "envs/gvclass.yml"
  input:
    str(querydir) + "/{querybase}.fna"
  log:
    outdir + "{querybase}/log/genecalling/{querybase}.log"
  output:
    gffout = outdir + "{querybase}/genecalling/{querybase}.gff",
    statsout = outdir + "{querybase}/stats/genecalling.tab",
    faafinalout = str(queryfaadir) + "/{querybase}.faa"
  shell:
    """
    python workflow/scripts/00genecalling_single.py {input} {output.gffout} {output.statsout} {output.faafinalout} &> {log}
    """

"""
Step 1 
Identify markers, extract, align
"""

rule run_hmmsearch:
  # hmmsearch to identify GVOGs in query sequences
  conda:
    "envs/gvclass.yml"
  input:
    queryfaa = str(queryfaadir) + "/{querybase}.faa",
    models = "resources/combinedGVOGuni9.hmm"
  log:
    outdir + "{querybase}/log/hmmsearch/{querybase}.log"
  output:
    combinedout = outdir + "{querybase}/hmmout/combinedGVOGuni9.out"
  shell:
    """
    python workflow/scripts/01hmmsearch.py {input.queryfaa} {input.models} {output.combinedout} &> {log}
    """

rule extract_qhits:
  # extract hits from hmmsearch, one file per marker, merge with refs
  conda:
    "envs/gvclass.yml"
  input:
    hmmout = outdir + "{querybase}/hmmout/combinedGVOGuni9.out",
    queryfaa = str(queryfaadir) + "/{querybase}.faa"
  output:
    queryhitsfaa = outdir + "{querybase}/query_hits_faa/{modelbase}.faa"
  shell:
    """
    python workflow/scripts/02extract_qhits.py {input.hmmout} {input.queryfaa} {output.queryhitsfaa}
    touch {output.queryhitsfaa}
    """


rule blastp_reduce_merge:
  conda:
    "envs/gvclass.yml"
  input:
    queryhitsfaa = outdir + "{querybase}/query_hits_faa/{modelbase}.faa",
    reffaa = "resources/refsGVOGs9/faa/{modelbase}.faa",
    refdb = "resources/refsGVOGs9/dmnd/{modelbase}.dmnd"
  output:
    blastpout = outdir + "{querybase}/blastp_out/{modelbase}.m8",
    mergedfaa = outdir + "{querybase}/query_hits_merged_faa/{modelbase}.faa"
  shell:
    """
    python workflow/scripts/03blastp_reduce_merge.py {input.queryhitsfaa} {input.reffaa} {input.refdb} {output.blastpout} {output.mergedfaa}
    touch {output.blastpout} {output.mergedfaa}
    """


rule align_trim:
  conda:
    "envs/gvclass.yml"
  input:
    mergedfaa = outdir + "{querybase}/query_hits_merged_faa/{modelbase}.faa"
  output:
    aln = outdir + "{querybase}/queryrefs_aligned/{modelbase}.mafft",
    trimmedaln = outdir + "{querybase}/queryrefs_aligned/{modelbase}.mafft01"
  shell:
    """
    python workflow/scripts/04align_trim.py {input.mergedfaa} {output.aln} {output.trimmedaln}
    touch {output.aln} {output.trimmedaln}
    """

"""
Step 2 - Alignment based
Get nearest neighbor in alignments
"""

"""
Step 3 - Tree based
Build protein trees, get nearest neighbor in trees
"""

rule build_trees:
  conda:
    "envs/gvclass.yml"
  input:
    trimmedaln = outdir + "{querybase}/queryrefs_aligned/{modelbase}.mafft01"
  output:
    tree = outdir + "{querybase}/queryrefs_fasttree/{modelbase}.FTWAG"
  shell:
    """
    python workflow/scripts/06build_tree.py {input.trimmedaln} {output.tree}
    touch {output.tree}
    """


rule get_nn:
  conda:
    "envs/gvclass.yml"
  params:
    queryname="{querybase}",
    fdir = outdir + "{querybase}"
  input:
    ft = expand(outdir + "{querybase}/queryrefs_fasttree/{modelbase}.FTWAG", querybase="{querybase}", modelbase=GVOGs9),
    alnt = expand(outdir + "{querybase}/queryrefs_aligned/{modelbase}.mafft01", querybase="{querybase}", modelbase=GVOGs9)
  log:
    outdir + "{querybase}/log/nn/{querybase}.log"
  output:
    tree_out = outdir + "{querybase}/{querybase}.tree_nn",
    aln_out = outdir + "{querybase}/{querybase}.aln_nn"
  shell: 
    """
    (python workflow/scripts/05get_nn_aln.py {params.queryname} {params.fdir}/queryrefs_aligned/ {output.aln_out} {labels}
    python workflow/scripts/07get_nn_tree.py {params.queryname} {params.fdir}/queryrefs_fasttree/ {output.tree_out} {labels}) &> {log}
    """


rule concat_tree:
  conda:
    "envs/gvclass.yml"
  input:
    expand(outdir + "{querybase}/queryrefs_aligned/{modelbase}.mafft01", querybase="{querybase}", modelbase=GVOGs9)
  output:
    concat = outdir + "{querybase}/concat/{querybase}_concat.mafft01",
    concattree = outdir + "{querybase}/concat/{querybase}_concat.FTWAG"
  shell:
    """
    python workflow/scripts/08concattree.py {output.concat} {output.concattree}
    """

rule summarize:
  conda:
    "envs/gvclass.yml"
  input:
    outdir + "{querybase}/{querybase}.aln_nn",
    outdir + "{querybase}/{querybase}.tree_nn"
  output:

    outdir + "{querybase}.nn.tab"
  shell:
    """
    python workflow/scripts/08summarize.py {input[0]} {input[1]} {output}
    """

rule cleanup:
  input:
    outdir + "{querybase}.nn.tab"
  params:
    fdir = outdir + "{querybase}"
  output:
    outdir + "{querybase}.tar.gz"
  shell:
    """
    python workflow/scripts/09cleanup.py {params.fdir} {output}
    """
