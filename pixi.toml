[project]
name = "gvclass"
version = "1.1.0"
description = "Giant virus classification tool using phylogenetic analysis"
authors = ["fschulz@lbl.gov"]
channels = ["conda-forge", "bioconda"]
platforms = ["linux-64"]

[dependencies]
# Python runtime
python = "3.11.*"

# Core scientific libraries used in the code
pandas = ">=2.3"     # Used for data manipulation
biopython = "1.85.*" # Used for sequence I/O

# Phylogenetic analysis
ete3 = ">=3.1.0"     # Used for tree parsing and analysis
iqtree = ">=3.0.0"   # External binary for tree building

# Build dependencies for pyrodigal
cython = "3.0.*"
setuptools = ">=62.0"
wheel = "*"

# System utilities
pyyaml = ">=6.0.0"   # For config file parsing
psutil = ">=6.0.0"   # For system monitoring
scikit-learn = ">=1.7.1,<2"

[pypi-dependencies]
# Bioinformatics tools (Python implementations)
pyhmmer = ">=0.10.0"          # HMM search
pytrimal = ">=0.8.0"          # Alignment trimming
pyfamsa = ">=0.5.0"           # Multiple sequence alignment
pyrodigal = { git = "https://github.com/tomasbruna/pyrodigal.git" }  # Gene calling with codes 106, 129
pyswrd = ">=0.1.0"            # BLAST alternative
veryfasttree = ">=3.0.0"      # FastTree implementation

# CLI framework
click = "==8.1.8"             # Explicit version to avoid conflicts

# Workflow orchestration
prefect = ">=3.4.10"          # Workflow management (latest stable)
prefect-dask = ">=0.3.0"      # Dask integration for Prefect
dask = "~=2024.3.0"           # Parallel computing (compatible version)
distributed = "~=2024.3.0"    # Dask distributed computing (compatible version)
dask-jobqueue = ">=0.9.0"     # Cluster job submission

# Utility libraries (dependencies of above)
networkx = ">=3.0"            # Required by dask
cloudpickle = ">=3.0"         # Required by dask/prefect

[tasks]
# Main command
gvclass = "./gvclass"

# Run example data
run-example = "./gvclass example -o example_results --threads 8"

# Manual database setup (database is included in container)
setup-db = "python -m src.bin.setup_database"

# Performance monitoring utilities
monitor-performance = "python src/test/monitor_performance.py"

# Container building
build-containers = "bash containers/build.sh"
build-docker = "docker build -t gvclass:1.1.0 -f containers/docker/Dockerfile ."
build-apptainer = "apptainer build gvclass.sif docker-daemon://gvclass:1.1.0"
analyze-parallel = "python src/test/analyze_parallelization.py"

test = "python -m pytest"
format = "black src gvclass"
lint = "flake8 src"
type-check = "mypy src"

[feature.dev.dependencies]
# Development tools
pytest = "*"
black = "*"
flake8 = "*"
mypy = "*"
pre-commit = "*"
click = "==8.1.8"  # Force version in dev too

[environments]
default = ["dev"]

[tool.pixi.pypi-options]
allow-pre-releases = true
